#!/bin/bash

# üöÄ Laravel Docker Compose Generator
# Kombiniert deploy-config.yml + .env f√ºr Docker Compose Generierung

set -e

# Farben und Emojis
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

START="üöÄ"
CONFIG="‚öôÔ∏è"
FILE="üìÑ"
SUCCESS="‚úÖ"
ERROR="‚ùå"
WARNING="‚ö†Ô∏è"
INFO="üí°"
DOCKER="üê≥"
DATABASE="üóÑÔ∏è"
CACHE="üîÑ"
SSL="üîí"
BACKUP="üíæ"

# Pfade
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../../.." && pwd)"
DOCKER_DIR="$PROJECT_ROOT/docker"
CONFIG_FILE="$PROJECT_ROOT/deploy-config.yml"
ENV_FILE="$PROJECT_ROOT/.env"
TEMPLATES_DIR="$DOCKER_DIR/local/templates"

print_status() {
    echo -e "${GREEN}$1${NC} $2"
}

print_warning() {
    echo -e "${YELLOW}$1${NC} $2"
}

print_error() {
    echo -e "${RED}$1${NC} $2"
}

print_info() {
    echo -e "${BLUE}$1${NC} $2"
}

print_header() {
    echo -e "\n${BLUE}============================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}============================================${NC}\n"
}

show_help() {
    cat << EOF

${START} Laravel Docker Compose Generator

Verwendung:
    ./generate-compose.sh [environment]

Environments:
    development  - Generiert development setup (Standard)
    production   - Generiert production setup
    all         - Generiert beide environments (Standard)

Beispiele:
    ./generate-compose.sh
    ./generate-compose.sh all
    ./generate-compose.sh development
    ./generate-compose.sh production

EOF
}

load_config() {
    print_status "${CONFIG}" "Lade deploy-config.yml..."
    
    if [ ! -f "$CONFIG_FILE" ]; then
        print_error "${ERROR}" "deploy-config.yml nicht gefunden: $CONFIG_FILE"
        exit 1
    fi
    
    # Projekt-Info aus YAML extrahieren
    PROJECT_NAME=$(grep -E "^  name:" "$CONFIG_FILE" | cut -d'"' -f2)
    DOMAIN=$(grep -E "^  domain:" "$CONFIG_FILE" | cut -d'"' -f2)
    PHP_VERSION=$(grep -E "^  php:" "$CONFIG_FILE" | cut -d'"' -f2)
    MYSQL_VERSION=$(grep -E "^  mysql:" "$CONFIG_FILE" | cut -d'"' -f2)
    REDIS_VERSION=$(grep -E "^  redis:" "$CONFIG_FILE" | cut -d'"' -f2)
    NODE_VERSION=$(grep -E "^  node:" "$CONFIG_FILE" | cut -d'"' -f2)
    
    # Features
    SSL_ENABLED=$(grep -E "^  ssl_enabled:" "$CONFIG_FILE" | cut -d' ' -f4)
    REDIS_CACHE=$(grep -E "^  redis_cache:" "$CONFIG_FILE" | cut -d' ' -f4)
    SCHEDULER_ENABLED=$(grep -E "^  scheduler_enabled:" "$CONFIG_FILE" | cut -d' ' -f4)
    QUEUE_WORKERS=$(grep -E "^  queue_workers:" "$CONFIG_FILE" | cut -d' ' -f4)
    
    print_status "${SUCCESS}" "deploy-config.yml erfolgreich geladen"
    print_info "${INFO}" "Projekt: $PROJECT_NAME"
    print_info "${INFO}" "Domain: $DOMAIN"
    print_info "${INFO}" "PHP: $PHP_VERSION, MySQL: $MYSQL_VERSION"
}

load_env() {
    print_status "${CONFIG}" "Lade .env Datei..."
    
    if [ ! -f "$ENV_FILE" ]; then
        print_error "${ERROR}" ".env Datei nicht gefunden: $ENV_FILE"
        print_info "${INFO}" "Kopiere .env.example zu .env und passe die Werte an"
        exit 1
    fi
    
    # .env Datei laden
    set -a
    source "$ENV_FILE"
    set +a
    
    # Fallback-Werte setzen
    HTTP_PORT=${HTTP_PORT:-8100}
    HTTPS_PORT=${HTTPS_PORT:-8143}
    MYSQL_PORT=${MYSQL_PORT:-8106}
    REDIS_PORT=${REDIS_PORT:-8179}
    MAILHOG_PORT=${MAILHOG_PORT:-8125}
    PHPMYADMIN_PORT=${PHPMYADMIN_PORT:-8180}
    
    DB_DATABASE=${DB_DATABASE:-laravel}
    DB_USERNAME=${DB_USERNAME:-laravel}
    DB_PASSWORD=${DB_PASSWORD:-password}
    MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-root}
    REDIS_PASSWORD=${REDIS_PASSWORD:-password}
    
    print_status "${SUCCESS}" ".env Datei erfolgreich geladen"
}

generate_env_file() {
    local environment=$1
    
    print_status "${FILE}" "Generiere .env f√ºr $environment..."
    
    local env_content="# Generated Docker Compose Environment
# Environment: $environment
# Generated by: generate-compose.sh

# Project Configuration
PROJECT_NAME=$PROJECT_NAME
ENVIRONMENT=$environment

# Ports
HTTP_PORT=$HTTP_PORT
HTTPS_PORT=$HTTPS_PORT
MYSQL_PORT=$MYSQL_PORT
REDIS_PORT=$REDIS_PORT

# Database
DB_DATABASE=$DB_DATABASE
DB_USERNAME=$DB_USERNAME
DB_PASSWORD=$DB_PASSWORD
MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD

# Redis
REDIS_PASSWORD=$REDIS_PASSWORD

# Development Tools
MAILHOG_PORT=$MAILHOG_PORT
PHPMYADMIN_PORT=$PHPMYADMIN_PORT

# Versions
PHP_VERSION=$PHP_VERSION
MYSQL_VERSION=$MYSQL_VERSION
REDIS_VERSION=$REDIS_VERSION
NODE_VERSION=$NODE_VERSION

# Features
SSL_ENABLED=$SSL_ENABLED
REDIS_CACHE=$REDIS_CACHE
SCHEDULER_ENABLED=$SCHEDULER_ENABLED
QUEUE_WORKERS=$QUEUE_WORKERS
"
    
    # Schreibe .env f√ºr Docker Compose
    echo "$env_content" > "$PROJECT_ROOT/.env.$environment"
    
    print_status "${SUCCESS}" ".env.$environment generiert"
}

copy_template() {
    local template_name=$1
    local target_name=$2
    
    local template_path="$TEMPLATES_DIR/$template_name"
    local target_path="$PROJECT_ROOT/$target_name"
    
    if [ ! -f "$template_path" ]; then
        print_error "${ERROR}" "Template nicht gefunden: $template_path"
        return 1
    fi
    
    # Template kopieren und Platzhalter ersetzen
    sed -e "s/\${PROJECT_NAME}/$PROJECT_NAME/g" \
        -e "s/\${HTTP_PORT}/$HTTP_PORT/g" \
        -e "s/\${HTTPS_PORT}/$HTTPS_PORT/g" \
        -e "s/\${MYSQL_PORT}/$MYSQL_PORT/g" \
        -e "s/\${REDIS_PORT}/$REDIS_PORT/g" \
        -e "s/\${MAILHOG_PORT}/$MAILHOG_PORT/g" \
        -e "s/\${PHPMYADMIN_PORT}/$PHPMYADMIN_PORT/g" \
        -e "s/\${PHP_VERSION}/$PHP_VERSION/g" \
        -e "s/\${MYSQL_VERSION}/$MYSQL_VERSION/g" \
        -e "s/\${REDIS_VERSION}/$REDIS_VERSION/g" \
        -e "s/\${NODE_VERSION}/$NODE_VERSION/g" \
        "$template_path" > "$target_path"
    
    print_status "${SUCCESS}" "$target_name erstellt"
    return 0
}

copy_mysql_config() {
    local environment=$1
    
    if [ "$environment" = "development" ]; then
        local source_file="mysql-dev.cnf"
        local target_dir="$DOCKER_DIR/local/mysql"
    else
        local source_file="mysql-prod.cnf"
        local target_dir="$DOCKER_DIR/remote/mysql"
    fi
    
    # Erstelle Verzeichnis falls nicht vorhanden
    mkdir -p "$target_dir"
    
    # Kopiere Konfiguration
    local template_path="$TEMPLATES_DIR/$source_file"
    local target_path="$target_dir/my.cnf"
    
    if [ -f "$template_path" ]; then
        cp "$template_path" "$target_path"
        print_status "${SUCCESS}" "MySQL Konfiguration kopiert: $target_path"
    else
        print_warning "${WARNING}" "MySQL Template nicht gefunden: $template_path"
    fi
}

generate_development() {
    print_status "${DOCKER}" "Generiere Development Environment..."
    
    # Generate .env file
    generate_env_file "development"
    
    # Copy Docker Compose template
    if copy_template "docker-compose.dev.yml" "docker-compose.yml"; then
        print_status "${SUCCESS}" "Development Docker Compose erstellt"
    fi
    
    # Copy MySQL config
    copy_mysql_config "development"
}

generate_production() {
    print_status "${DOCKER}" "Generiere Production Environment..."
    
    # Generate .env file
    generate_env_file "production"
    
    # Copy Docker Compose template
    if copy_template "docker-compose.prod.yml" "docker-compose.prod.yml"; then
        print_status "${SUCCESS}" "Production Docker Compose erstellt"
    fi
    
    # Copy MySQL config
    copy_mysql_config "production"
}

generate_all() {
    print_status "${START}" "Starte Docker Compose Generierung..."
    
    # Load configuration
    load_config
    load_env
    
    # Generate environments
    generate_development
    generate_production
    
    print_status "${SUCCESS}" "Alle Docker Compose Dateien erfolgreich generiert!"
    
    # Show next steps
    echo
    echo "============================================"
    print_info "${INFO}" "N√§chste Schritte:"
    echo "  ${DOCKER} Development starten: docker-compose up -d"
    echo "  ${DOCKER} Production starten: docker-compose -f docker-compose.prod.yml up -d"
    echo "  ${DATABASE} Datenbank migrieren: docker-compose exec app php artisan migrate"
    echo "  ${CACHE} Cache l√∂schen: docker-compose exec app php artisan cache:clear"
    echo "============================================"
}

main() {
    # Help anzeigen
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        show_help
        exit 0
    fi
    
    # Environment bestimmen
    environment=${1:-all}
    
    # Load configuration
    load_config
    load_env
    
    # Generate based on environment
    case "$environment" in
        "development")
            generate_development
            ;;
        "production")
            generate_production
            ;;
        "all")
            generate_all
            ;;
        *)
            print_error "${ERROR}" "Unbekanntes Environment: $environment"
            show_help
            exit 1
            ;;
    esac
}

# Script ausf√ºhren
main "$@"